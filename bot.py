import os
import socket
import threading
import atexit
import logging
import requests
import urllib.parse
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# üß† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
start_time = datetime.now().isoformat()
host_name = socket.gethostname()
pid = os.getpid()

logging.basicConfig(level=logging.INFO)
logging.info(f"Bot started at {start_time} on host {host_name} with PID: {pid}")
atexit.register(lambda: logging.info(f"Bot with PID {os.getpid()} is shutting down"))

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")

if not TELEGRAM_TOKEN or not NEWSAPI_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ NEWSAPI_KEY –≤ .env")

# üì° –ö–æ–º–ø–∞–Ω–∏–∏
COMPANIES = [
    "OpenAI", "NVIDIA", "Google DeepMind", "Microsoft",
    "Amazon", "Meta", "Anthropic", "DeepSeek"
]

# üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
def get_news(query):
    try:
        url = f'https://newsapi.org/v2/everything?q={urllib.parse.quote(query)}&sortBy=publishedAt&language=en&apiKey={NEWSAPI_KEY}'
        response = requests.get(url, timeout=10)
        data = response.json()
        articles = data.get('articles', [])[:5]
        if not articles:
            return f"–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ: {query}"
        news = ""
        for article in articles:
            title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            url = article.get('url', '')
            news += f"‚Ä¢ {title}\n{url}\n\n"
        return news
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# üéØ –ö–Ω–æ–ø–æ—á–Ω—ã–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Latest News", callback_data="latest_news")],
        [InlineKeyboardButton("AI Companies", callback_data="companies_menu")]
    ])

def news_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Main Options", callback_data="main_menu")],
        [InlineKeyboardButton("AI Companies", callback_data="companies_menu")]
    ])

def companies_menu():
    buttons = [[InlineKeyboardButton("Main Options", callback_data="main_menu")]]
    for company in COMPANIES:
        buttons.append([InlineKeyboardButton(company, callback_data=f"company_{company}")])
    return InlineKeyboardMarkup(buttons)

def company_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Main Options", callback_data="main_menu")],
        [InlineKeyboardButton("AI Companies", callback_data="companies_menu")]
    ])

# üì≤ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "start_button" or data == "main_menu":
        await query.edit_message_text("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif data == "latest_news":
        await query.edit_message_text("üß† –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ò–ò...", reply_markup=news_menu())
        news = get_news("artificial intelligence")
        await query.message.reply_text(news, reply_markup=news_menu())

    elif data == "companies_menu":
        await query.edit_message_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=companies_menu())

    elif data.startswith("company_"):
        company = data.replace("company_", "")
        await query.edit_message_text(f"üè¢ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {company}", reply_markup=company_menu())
        news = get_news(company)
        await query.message.reply_text(news, reply_markup=company_menu())

    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
is_running = False

def main():
    global is_running
    if is_running:
        logging.warning("Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
        return
    is_running = True

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    logging.info("Handlers registered. Starting polling...")
    app.run_polling()

# üß∑ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    if threading.active_count() == 1:
        main()
    else:
        logging.warning("Polling already active ‚Äî skipping duplicate start")

