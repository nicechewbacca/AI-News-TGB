import os
import socket
import threading
import atexit
import logging
import requests
import urllib.parse
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

start_time = datetime.now().isoformat()
host_name = socket.gethostname()
pid = os.getpid()

logging.basicConfig(level=logging.INFO)
logging.info(f"Bot started at {start_time} on host {host_name} with PID: {pid}")
atexit.register(lambda: logging.info(f"Bot with PID {os.getpid()} is shutting down"))

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")

if not TELEGRAM_TOKEN or not NEWSAPI_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –∏–ª–∏ NEWSAPI_KEY –≤ .env")

def get_news(query):
    try:
        url = f'https://newsapi.org/v2/everything?q={urllib.parse.quote(query)}&sortBy=publishedAt&language=en&apiKey={NEWSAPI_KEY}'
        response = requests.get(url, timeout=10)
        data = response.json()
        articles = data.get('articles', [])[:5]
        if not articles:
            return f"–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ: {query}"
        news = ""
        for article in articles:
            title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            url = article.get('url', '')
            news += f"‚Ä¢ {title}\n{url}\n\n"
        return news
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–æ–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ò–ò...")
    news = get_news("artificial intelligence")
    await update.message.reply_text(news)

async def company_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä: /company OpenAI")
        return
    company_name = " ".join(context.args)
    await update.message.reply_text(f"–ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {company_name}...")
    news = get_news(company_name)
    await update.message.reply_text(news)

async def deepseek_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ DeepSeek...")
    news = get_news("DeepSeek")
    await update.message.reply_text(news)

async def companies_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    companies = [
        "OpenAI", "NVIDIA", "Google DeepMind", "Microsoft", "Amazon", "Meta", "Anthropic", "DeepSeek"
    ]
    message = "üîç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"‚Ä¢ {c}" for c in companies)
    await update.message.reply_text(message)

is_running = False

def main():
    global is_running
    if is_running:
        logging.warning("Polling —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω")
        return
    is_running = True

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("news", news_command))
    app.add_handler(CommandHandler("company", company_command))
    app.add_handler(CommandHandler("deepseek", deepseek_command))
    app.add_handler(CommandHandler("companies", companies_command))
    logging.info("Handlers registered. Starting polling...")
    app.run_polling()

if __name__ == "__main__":
    if threading.active_count() == 1:
        main()
    else:
        logging.warning("Polling already active ‚Äî skipping duplicate start")
